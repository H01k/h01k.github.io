<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VMP授权keygen分析</title>
      <link href="/2020/01/11/vmp-shou-quan-keygen-fen-xi/"/>
      <url>/2020/01/11/vmp-shou-quan-keygen-fen-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> VMP </tag>
            
            <tag> keygen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tiny 实验报告</title>
      <link href="/2020/01/11/tiny-shi-yan-bao-gao/"/>
      <url>/2020/01/11/tiny-shi-yan-bao-gao/</url>
      
        <content type="html"><![CDATA[<h1 id="实验报告"><a href="#实验报告" class="headerlink" title="实验报告"></a>实验报告</h1><h2 id="分析该语言的词法和语法规则，分析其编译器的运行命令和代码组成结构"><a href="#分析该语言的词法和语法规则，分析其编译器的运行命令和代码组成结构" class="headerlink" title="分析该语言的词法和语法规则，分析其编译器的运行命令和代码组成结构"></a>分析该语言的词法和语法规则，分析其编译器的运行命令和代码组成结构</h2><h3 id="词法规则"><a href="#词法规则" class="headerlink" title="词法规则"></a>词法规则</h3><p>下面是LEX中的变量声明</p><p>定义段可以包含任意的C语言文件，符号说明，其代码会被直接拷贝到生成的扫描器代码文件中</p><p>声明示例如下</p><blockquote><p>%{</p><p>…</p><p>%}</p></blockquote><pre><code>digit       [0-9]number      {digit}+letter      [a-zA-Z]identifier  {letter}+newline     \nwhitespace  [ \t]+</code></pre><p>下面是一些关键字，规则段利用正则表达式来匹配模式，每当成功匹配一个模式，就对应其后“{ }” 中的代码。</p><p>语法规则示例如下</p><blockquote><p>%%</p><p>…</p><p>%%</p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">"if"            {return IF;}"then"          {return THEN;}"else"          {return ELSE;}"end"           {return END;}"repeat"        {return REPEAT;}"until"         {return UNTIL;}"read"          {return READ;}"write"         {return WRITE;}":="            {return ASSIGN;}"="             {return EQ;}"<"             {return LT;}"+"             {return PLUS;}"-"             {return MINUS;}"*"             {return TIMES;}"/"             {return OVER;}"("             {return LPAREN;}")"             {return RPAREN;}";"             {return SEMI;}{number}        {return NUM;}{identifier}    {return ID;}{newline}       {lineno++;}{whitespace}    {/* skip whitespace */}"{"             { char c;                  do                  { c = input();                    if (c == EOF) break;                    if (c == '\n') lineno++;                  } while (c != '}');                }.               {return ERROR;}%%int yywrap(){ return 1;}TokenType getToken(void){ static int firstTime = TRUE;  TokenType currentToken;  if (firstTime)  { firstTime = FALSE;    lineno++;    yyin = source;    yyout = listing;  }  currentToken = yylex();  strncpy(tokenString,yytext,MAXTOKENLEN);  if (TraceScan) {    fprintf(listing,"\t%d: ",lineno);    printToken(currentToken,tokenString);  }  return currentToken;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加<code>//</code> 和 <code>/* */</code>的规则</p><pre class="line-numbers language-C"><code class="language-C">"//"             { char c;                  do                  { c = input();                    if (c == EOF) break;                  } while (c != '\n');                }"/*"             { char c;                   int d=0;                  do                  { c = input();                    if (c == '/'&&d==1)                    d=2;                    else if(c !='/'&&d==1)                     d=0;                    if (c == EOF) break;                    if (c == '\n') lineno++;                    if (c == '*') d=1;                  } while (d != 2);                }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h4><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20200111132822132.png" alt="image-20200111132822132"></p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>需要先修改tiny.l使其多识别一种符号</p><pre class="line-numbers language-C"><code class="language-C">"while"         {return WHILE;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法规则主要在YACC中，添加 while 语法在tiny.y文件中增加声明和定义</p><pre class="line-numbers language-C"><code class="language-C">%token WHILEwhile_stmt     : WHILE exp THEN stmt_seq END                 { $$ = newStmtNode(WHILEK);                   $$->child[0] = $2;                   $$->child[1] = $4;                 }            ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>newStmtNode(WHILEK)</code> </p><p>还需要修改<code>cgen</code>文件，增加对于<code>WHILEK</code>的处理</p><pre class="line-numbers language-c"><code class="language-c">      <span class="token keyword">case</span> WHILEK <span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>TraceCode<span class="token punctuation">)</span> <span class="token function">emitComment</span><span class="token punctuation">(</span><span class="token string">"-> while"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         p1 <span class="token operator">=</span> tree<span class="token operator">-></span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>         p2 <span class="token operator">=</span> tree<span class="token operator">-></span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* generate code for test expression */</span>         savedLoc1 <span class="token operator">=</span> <span class="token function">emitSkip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token function">cGen</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>         savedLoc2 <span class="token operator">=</span> <span class="token function">emitSkip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token function">emitComment</span><span class="token punctuation">(</span><span class="token string">"while: jump to else belongs here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">cGen</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">emitRM_Abs</span><span class="token punctuation">(</span><span class="token string">"LDA"</span><span class="token punctuation">,</span>pc<span class="token punctuation">,</span>savedLoc1<span class="token punctuation">,</span><span class="token string">"jmp to end"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* recurse on then part */</span>         currentLoc <span class="token operator">=</span> <span class="token function">emitSkip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token function">emitBackup</span><span class="token punctuation">(</span>savedLoc2<span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token function">emitRM_Abs</span><span class="token punctuation">(</span><span class="token string">"JEQ"</span><span class="token punctuation">,</span>ac<span class="token punctuation">,</span>currentLoc<span class="token punctuation">,</span><span class="token string">"while: jmp to else"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">emitRestore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>TraceCode<span class="token punctuation">)</span>  <span class="token function">emitComment</span><span class="token punctuation">(</span><span class="token string">"&lt;- while"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* WHILEK_k */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tny文件修改为,从10 倒序打印</p><pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">{</span> Sample program  in TINY language <span class="token operator">-</span>  computes factorial<span class="token punctuation">}</span>read x<span class="token comment" spellcheck="true">// sssss</span><span class="token comment" spellcheck="true">/* ddd */</span><span class="token punctuation">;</span> <span class="token punctuation">{</span> input an integer <span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> x then <span class="token punctuation">{</span> don't compute <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">}</span>  fact <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  repeat    fact <span class="token punctuation">:</span><span class="token operator">=</span> fact <span class="token operator">*</span> x<span class="token punctuation">;</span>    x <span class="token punctuation">:</span><span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">1</span>  until x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  write fact  <span class="token punctuation">{</span> output factorial of x <span class="token punctuation">}</span>end<span class="token punctuation">;</span>y <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token number">0</span> <span class="token operator">&lt;</span> y then  y <span class="token punctuation">:</span><span class="token operator">=</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  write yend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法树：</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20200111153138350.png" alt="image-20200111153138350"></p><p>运行的效果：</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20200111153205806.png" alt="image-20200111153205806"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hookme</title>
      <link href="/2019/12/26/hookme/"/>
      <url>/2019/12/26/hookme/</url>
      
        <content type="html"><![CDATA[<h1 id="新的博客开始啦"><a href="#新的博客开始啦" class="headerlink" title="新的博客开始啦~"></a>新的博客开始啦~</h1><p>认真整理东西！！！ 冲！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
