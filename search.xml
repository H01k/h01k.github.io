<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kctf 总决赛第四题</title>
      <link href="/2019/12/30/kctf-zong-jue-sai-di-si-ti/"/>
      <url>/2019/12/30/kctf-zong-jue-sai-di-si-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="西部乐园-WP"><a href="#西部乐园-WP" class="headerlink" title="西部乐园 WP"></a>西部乐园 WP</h1><h1 id="第六题-三道八佛"><a href="#第六题-三道八佛" class="headerlink" title="第六题 三道八佛"></a>第六题 三道八佛</h1><blockquote><p>题目信息：Windows </p><p>题目来源：2019 看雪CTF总决赛</p></blockquote><p>打了一次看雪总决赛，这是选取了其中的第六题，最后是由队友提交的writeup，所以会在看雪论坛找到同样的过程。</p><p>题目是多层SMC完成的对于代码的加密，使用OD加载程序以后发现跑起来非常的卡。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111011819888.png" alt="image-20200111011819888"></p><p>由于SMC的代码量很大，所以在OD中不太好用，我选择了x32dbg。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111012429056.png" alt="image-20200111012429056"></p><p>由于采用了多层的smc，所以在ida中是无法直接分析算法的。</p><p>程序开头进行两个 <strong>VirtualProtect</strong> 进行修改.修改属性为可读写执行. 下面会不断的进行代码重定位.并且操作 <strong>FS:[4] FS:[8]</strong> 等来进行保存用户输入的UserName 以及 序列号</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/723188_7CW2JQEEDFDXY5Z.png" alt="img"></p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111013459617.png" alt="image-20200111013459617"></p><p>动态跑起来，可以发现最初输入的KCTF 被填充了。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111013823999.png" alt="image-20200111013823999"></p><p>下面的call eax 就是进行切换堆栈，并且跳入下一层smc 中。并且开始抹除原始代码。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111013943021.png" alt="image-20200111013943021"></p><pre><code>$calleax = 0$num = 0$jnzaddr = 0$f = 0$prevaddr = 0$retaddr=0$hasj=0bph 004014DFrun//input the username and passwordbphcstart:find cip,FFD0,0x200cmp $result,0je overmov $calleax,$resultbph $calleaxrunbphcinc $numStepIntoStepIntoStepOvermov $jnzaddr,cipfind_jnz:find cip,8BE55DC3,0x220cmp $result,0je nobpmov $retaddr,$resultbph $retaddr+3runbphcStepIntoStepIntoinc $nummov $jnzaddr,cipnobp:find jnzaddr,75??,0x200cmp $result,0jnz isjnzjnzs:find cip,0F85????????,0x200cmp $result,0jnz isjnzsjmp nofoundruntojnz:mov f,0bph $jnzaddr+2mov $hasj,1jmp jnzsruntojnzs:mov f,0mov $jnzaddr,$resultbph $jnzaddr+6runbphc mov $hasj,0nofound:cmp $hasj,1jnz nojumpmov $hasj,0runbphcnojump:jmp startisjnz:mov $jnzaddr,$result$prevaddr = dis.prev($jnzaddr)$prevaddr = $prevaddr + dis.len($prevaddr)cmp $prevaddr,$jnzaddrje runtojnzadd $jnzaddr,2jmp find_jnzisjnzs:mov $jnzaddr,$result$prevaddr = dis.prev($jnzaddr)$prevaddr = $prevaddr + dis.len($prevaddr)cmp $prevaddr,$jnzaddrje runtojnzscmp $hasj,1jnz nojjmp nofoundnoj:add $jnzaddr,2jmp find_jnzover:cmp f,0jnz endmov f,1jnzaddr=cipjmp find_jnzend:log decryptnum:{$num}msg &quot;over&quot;</code></pre><p>通过比对进入smc时的特征，使用x32dbg脚本，跑完发现有1403层smc，用脚本跑到最后一层，发现下面的代码是完整的函数，代码很长，还有很多重定位和混淆，故先全部提取到code文件并修正一下esi。</p><p>用IDA分析code文件，先修改基址为0x1A1857E，F5代码如下。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111014720242.png" alt="image-20200111014720242"></p><p>代码比较清晰了，serial经过计算，跟用户名比较，如果相同则成功。</p><p>注意KCTF用户名不足16位，后面的填充数据也是要比较的。也就是说实际上比较的是</p><blockquote><p>4B 43 54 46 00 1A 19 18 17 16 15 14 13 12 11 10 00</p></blockquote><p>因为代码还是有点看不太懂的，所以提取反编译以后的代码，放到VS中重新编译成exe以后使用angr跑出来flag。  angr 的python代码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    load_option <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    b <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./ConsoleApplication21.exe"</span><span class="token punctuation">,</span> load_options<span class="token operator">=</span>load_option<span class="token punctuation">)</span>    state <span class="token operator">=</span> b<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x401040</span><span class="token punctuation">)</span>    concrete_addr <span class="token operator">=</span> <span class="token number">0x404378</span>    flag_chars <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'flag_%d'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_chars<span class="token punctuation">)</span>    state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>concrete_addr<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>    sm <span class="token operator">=</span> b<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>state<span class="token punctuation">)</span>    <span class="token keyword">print</span> sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x4013A3</span><span class="token punctuation">)</span>    found <span class="token operator">=</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>found<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> temp    solution <span class="token operator">=</span> found<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>eval<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> cast_to<span class="token operator">=</span>str<span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> solution<span class="token punctuation">:</span>        s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> s    <span class="token keyword">print</span> solution<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>    <span class="token keyword">print</span> flag<span class="token punctuation">,</span> found<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后成功跑出结果。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111014829398.png" alt="image-20200111014829398"></p>]]></content>
      
      
      <categories>
          
          <category> reverse WP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse 看雪CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hookme</title>
      <link href="/2019/12/26/hookme/"/>
      <url>/2019/12/26/hookme/</url>
      
        <content type="html"><![CDATA[<h1 id="新的博客开始啦"><a href="#新的博客开始啦" class="headerlink" title="新的博客开始啦~"></a>新的博客开始啦~</h1><p>认真整理东西！！！ 冲！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
